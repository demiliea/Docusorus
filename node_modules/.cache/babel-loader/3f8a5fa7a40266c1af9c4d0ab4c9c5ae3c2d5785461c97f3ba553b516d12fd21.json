{"ast":null,"code":"var _jsxFileName = \"/workspace/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LandingPage from './components/LandingPage';\nimport FlexibleDevXConsole from './components/FlexibleDevXConsole';\nimport Keycloak from 'keycloak-js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentPage, setCurrentPage] = useState('landing');\n  const [authMode, setAuthMode] = useState('guest');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [username, setUsername] = useState();\n\n  // Check if user is already authenticated on app load\n  useEffect(() => {\n    const checkExistingAuth = async () => {\n      try {\n        const keycloak = new Keycloak({\n          url: 'https://keycloak.eu-nordics-sto-test.dstny.d4sp.com/auth',\n          realm: '40aa6bdb-11e5-49b7-8af8-6afe2111e514',\n          clientId: 'sam'\n        });\n        const authenticated = await keycloak.init({\n          onLoad: 'check-sso',\n          checkLoginIframe: false,\n          pkceMethod: 'S256'\n        });\n        if (authenticated && keycloak.tokenParsed) {\n          setIsAuthenticated(true);\n          setUsername(keycloak.tokenParsed.preferred_username);\n          setAuthMode('authenticated');\n        }\n      } catch (error) {\n        console.debug('Auth check failed:', error);\n        // Continue as guest - this is expected if Keycloak is not available\n      }\n    };\n    checkExistingAuth();\n  }, []);\n  const handleSignIn = () => {\n    setAuthMode('authenticated');\n    setCurrentPage('console');\n  };\n  const handleContinueWithoutSignIn = () => {\n    setAuthMode('placeholder');\n    setCurrentPage('console');\n  };\n  const handleBackToLanding = () => {\n    setCurrentPage('landing');\n  };\n  if (currentPage === 'landing') {\n    return /*#__PURE__*/_jsxDEV(LandingPage, {\n      onSignIn: handleSignIn,\n      onContinueWithoutSignIn: handleContinueWithoutSignIn,\n      isAuthenticated: isAuthenticated,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(FlexibleDevXConsole, {\n    mode: authMode,\n    onBackToLanding: handleBackToLanding\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"m9OluDKYmFque9QT5o6IGHUzeD8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LandingPage","FlexibleDevXConsole","Keycloak","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","authMode","setAuthMode","isAuthenticated","setIsAuthenticated","username","setUsername","checkExistingAuth","keycloak","url","realm","clientId","authenticated","init","onLoad","checkLoginIframe","pkceMethod","tokenParsed","preferred_username","error","console","debug","handleSignIn","handleContinueWithoutSignIn","handleBackToLanding","onSignIn","onContinueWithoutSignIn","fileName","_jsxFileName","lineNumber","columnNumber","mode","onBackToLanding","_c","$RefreshReg$"],"sources":["/workspace/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LandingPage from './components/LandingPage';\nimport FlexibleDevXConsole from './components/FlexibleDevXConsole';\nimport Keycloak from 'keycloak-js';\nimport './App.css';\n\ntype AppState = 'landing' | 'console';\ntype AuthMode = 'authenticated' | 'placeholder' | 'guest';\n\nconst App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState<AppState>('landing');\n  const [authMode, setAuthMode] = useState<AuthMode>('guest');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [username, setUsername] = useState<string | undefined>();\n\n  // Check if user is already authenticated on app load\n  useEffect(() => {\n    const checkExistingAuth = async () => {\n      try {\n        const keycloak = new Keycloak({\n          url: 'https://keycloak.eu-nordics-sto-test.dstny.d4sp.com/auth',\n          realm: '40aa6bdb-11e5-49b7-8af8-6afe2111e514',\n          clientId: 'sam',\n        });\n\n        const authenticated = await keycloak.init({\n          onLoad: 'check-sso',\n          checkLoginIframe: false,\n          pkceMethod: 'S256',\n        });\n\n        if (authenticated && keycloak.tokenParsed) {\n          setIsAuthenticated(true);\n          setUsername(keycloak.tokenParsed.preferred_username as string);\n          setAuthMode('authenticated');\n        }\n      } catch (error) {\n        console.debug('Auth check failed:', error);\n        // Continue as guest - this is expected if Keycloak is not available\n      }\n    };\n\n    checkExistingAuth();\n  }, []);\n\n  const handleSignIn = () => {\n    setAuthMode('authenticated');\n    setCurrentPage('console');\n  };\n\n  const handleContinueWithoutSignIn = () => {\n    setAuthMode('placeholder');\n    setCurrentPage('console');\n  };\n\n  const handleBackToLanding = () => {\n    setCurrentPage('landing');\n  };\n\n  if (currentPage === 'landing') {\n    return (\n      <LandingPage\n        onSignIn={handleSignIn}\n        onContinueWithoutSignIn={handleContinueWithoutSignIn}\n        isAuthenticated={isAuthenticated}\n        username={username}\n      />\n    );\n  }\n\n  return (\n    <FlexibleDevXConsole\n      mode={authMode}\n      onBackToLanding={handleBackToLanding}\n    />\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKnB,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAW,SAAS,CAAC;EACnE,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAW,OAAO,CAAC;EAC3D,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAqB,CAAC;;EAE9D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAId,QAAQ,CAAC;UAC5Be,GAAG,EAAE,0DAA0D;UAC/DC,KAAK,EAAE,sCAAsC;UAC7CC,QAAQ,EAAE;QACZ,CAAC,CAAC;QAEF,MAAMC,aAAa,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC;UACxCC,MAAM,EAAE,WAAW;UACnBC,gBAAgB,EAAE,KAAK;UACvBC,UAAU,EAAE;QACd,CAAC,CAAC;QAEF,IAAIJ,aAAa,IAAIJ,QAAQ,CAACS,WAAW,EAAE;UACzCb,kBAAkB,CAAC,IAAI,CAAC;UACxBE,WAAW,CAACE,QAAQ,CAACS,WAAW,CAACC,kBAA4B,CAAC;UAC9DhB,WAAW,CAAC,eAAe,CAAC;QAC9B;MACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,KAAK,CAAC;QAC1C;MACF;IACF,CAAC;IAEDZ,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,YAAY,GAAGA,CAAA,KAAM;IACzBpB,WAAW,CAAC,eAAe,CAAC;IAC5BF,cAAc,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED,MAAMuB,2BAA2B,GAAGA,CAAA,KAAM;IACxCrB,WAAW,CAAC,aAAa,CAAC;IAC1BF,cAAc,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED,MAAMwB,mBAAmB,GAAGA,CAAA,KAAM;IAChCxB,cAAc,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED,IAAID,WAAW,KAAK,SAAS,EAAE;IAC7B,oBACEH,OAAA,CAACJ,WAAW;MACViC,QAAQ,EAAEH,YAAa;MACvBI,uBAAuB,EAAEH,2BAA4B;MACrDpB,eAAe,EAAEA,eAAgB;MACjCE,QAAQ,EAAEA;IAAS;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAEN;EAEA,oBACElC,OAAA,CAACH,mBAAmB;IAClBsC,IAAI,EAAE9B,QAAS;IACf+B,eAAe,EAAER;EAAoB;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEN,CAAC;AAAChC,EAAA,CAnEID,GAAa;AAAAoC,EAAA,GAAbpC,GAAa;AAqEnB,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}